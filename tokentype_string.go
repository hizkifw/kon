// Code generated by "stringer -type TokenType -trimprefix Token"; DO NOT EDIT.

package main

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TokenUnknown-0]
	_ = x[TokenWhitespace-1]
	_ = x[TokenComment-2]
	_ = x[TokenIdent-3]
	_ = x[TokenParenO-4]
	_ = x[TokenParenC-5]
	_ = x[TokenBracketO-6]
	_ = x[TokenBracketC-7]
	_ = x[TokenBraceO-8]
	_ = x[TokenBraceC-9]
	_ = x[TokenSemi-10]
	_ = x[TokenScope-11]
	_ = x[TokenComma-12]
	_ = x[TokenPeriod-13]
	_ = x[TokenNumLiteral-14]
	_ = x[TokenStrLiteral-15]
	_ = x[startTokenKeywords-16]
	_ = x[TokenFunctionKw-17]
	_ = x[TokenIfKw-18]
	_ = x[TokenReturnKw-19]
	_ = x[TokenTypeKw-20]
	_ = x[TokenStructKw-21]
	_ = x[endTokenKeywords-22]
	_ = x[TokenLT-23]
	_ = x[TokenLTE-24]
	_ = x[TokenGT-25]
	_ = x[TokenGTE-26]
	_ = x[TokenAssign-27]
	_ = x[TokenEqual-28]
	_ = x[TokenLogicalAnd-29]
	_ = x[TokenLogicalOr-30]
	_ = x[TokenBitwiseAnd-31]
	_ = x[TokenBitwiseOr-32]
	_ = x[TokenArrowR-33]
	_ = x[totalTokens-34]
}

const _TokenType_name = "UnknownWhitespaceCommentIdentParenOParenCBracketOBracketCBraceOBraceCSemiScopeCommaPeriodNumLiteralStrLiteralstartTokenKeywordsFunctionKwIfKwReturnKwTypeKwStructKwendTokenKeywordsLTLTEGTGTEAssignEqualLogicalAndLogicalOrBitwiseAndBitwiseOrArrowRtotalTokens"

var _TokenType_index = [...]uint8{0, 7, 17, 24, 29, 35, 41, 49, 57, 63, 69, 73, 78, 83, 89, 99, 109, 127, 137, 141, 149, 155, 163, 179, 181, 184, 186, 189, 195, 200, 210, 219, 229, 238, 244, 255}

func (i TokenType) String() string {
	if i >= TokenType(len(_TokenType_index)-1) {
		return "TokenType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TokenType_name[_TokenType_index[i]:_TokenType_index[i+1]]
}
